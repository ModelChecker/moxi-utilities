// Parse table for MoXI parser
//
// Each line defines an edge in an automata, defining the next state given the 
// current state and token, whether or not to consume the current token, and 
// whether to push a state onto the parse stack. The format is:
//
// <Current state>  <Token>  <Next state>  <Consume token?>  <Push states?>
//
// If <Token> is '*', this defines a default action for <Current state>.
// Example: If the current state is R0 and the current token is <symbol>,
//          then consume the next token and go to ERR_EXP_RP.
//
// All error states begin with 'ERR_', the default error state is 'ERR'
//
// The initial state of the parser is 'CMD0'.

// Errors
ERR_EXP_RP         *       ERR        pass        _
ERR_EXP_LP_EOF     *       ERR        pass        _


// End of syntactic element
R0          TOK_RP              DONE           consume     _
R0          *                   ERR_EXP_RP     consume     _


// Commands
//   <command> ::= 
//              ( exit )
//            | ( reset )
//            | ( assert <term> )
//            | ( echo <string> )
//            | ( set-logic <symbol> )
//            | ( define-fun <symbol> ( <sorted-var>* ) <sort> <term> )
//            | ( declare-fun <symbol> ( <sort>* ) <sort> )
//            | ( define-sort <symbol> ( <symbol>* ) <sort> )
//            | ( declare-sort <symbol> <numeral> )
//            | ( declare-enum-sort <symbol> ( <symbol>+ ) )
//            | ( declare-const <symbol> <sort> )
//            | ( define-const <symbol> <sort> <term> )
//            | ( define-system <define-sys-attribute>* )
//            | ( check-system <check-sys-attribute>* )
//            | EOF

// Start
CMD0        TOK_LP              CMD1               consume     _
CMD0        TOK_EOF             DONE               pass        _
CMD0        *                   ERR_EXP_LP_EOF     pass        _

// After '('
CMD1        TOK_RW_EXIT                 R0          consume     _
CMD1        TOK_RW_RESET                R0          consume     _
CMD1        TOK_RW_ASSERT               TRM0        consume     R0
CMD1        TOK_RW_ECHO                 CMD2        consume     _
CMD1        TOK_RW_SET_LOGIC            CMD3        consume     _
CMD1        TOK_RW_DEFINE_FUN           CMD4        consume     _
CMD1        TOK_RW_DECLARE_FUN          CMD5        consume     _
CMD1        TOK_RW_DEFINE_SORT          CMD6        consume     _
CMD1        TOK_RW_DECLARE_SORT         CMD7        consume     _
CMD1        TOK_RW_DECLARE_ENUM_SORT    CMD8        consume     _
CMD1        TOK_RW_DECLARE_CONST        CMD9        consume     _
CMD1        TOK_RW_DEFINE_CONST         CMD10       consume     _
CMD1        TOK_RW_DEFINE_SYS           CMD11       consume     _
CMD1        TOK_RW_CHECK_SYS            CMD12       consume     _

// echo
CMD2        TOK_STRING      R0      consume     _

// set-logic
CMD3        TOK_SYMBOL      R0      consume     _

// define-fun
CMD4        TOK_SYMBOL      SVL0        consume     R0,TRM0,SRT0

// declare-fun
CMD5        TOK_SYMBOL      CMD3a       consume     _
CMD5a       TOK_LP          CMD3b       consume     _
CMD5b       TOK_RP          SRT0        consume     R0
CMD5b       *               SRT0        pass        CMD3b

// define-sort
CMD6        TOK_SYMBOL      CMD4a       consume     _
CMD6a       TOK_LP          CMD4b       consume     _
CMD6b       TOK_RP          SRT0        consume     R0
CMD6b       TOK_SYMBOL      CMD4b       consume     _

// declare-sort
CMD7        TOK_SYMBOL      CMD5a       consume     _
CMD7a       TOK_NUMERAL     R0          consume     _

// declare-enum-sort
CMD8        TOK_SYMBOL      CMD8a       consume     _
CMD8a       TOK_LP          CMD8b       consume     _
CMD8b       TOK_SYMBOL      CMD8c       consume     _
CMD8c       TOK_SYMBOL      CMD8c       consume     _
CMD8c       TOK_RP          R0          consume     _

// declare-const
CMD9        TOK_SYMBOL      SRT0       consume     R0

// define-const
CMD10       TOK_SYMBOL      SRT0       consume     R0,TRM0

//   <define-sys-attr> ::=
//              :input  <sorted-var-list> <define-sys-attr>
//            | :output <sorted-var-list> <define-sys-attr>
//            | :local  <sorted-var-list> <define-sys-attr>
//            | :init  <term> <define-sys-attr>
//            | :trans <term> <define-sys-attr>
//            | :inv   <term> <define-sys-attr>
//            | :subsys ( <symbol> ( <symbol>* ) ) <define-sys-attr>
//            | )
//
CMD11       TOK_SYMBOL      CMD11a      consume     _
CMD11a      TOK_KW_INPUT    SVL0       consume     CMD11a
CMD11a      TOK_KW_OUTPUT   SVL0       consume     CMD11a
CMD11a      TOK_KW_LOCAL    SVL0       consume     CMD11a
CMD11a      TOK_KW_INIT     TRM0       consume     CMD11a
CMD11a      TOK_KW_TRANS    TRM0       consume     CMD11a
CMD11a      TOK_KW_INV      TRM0       consume     CMD11a
CMD11a      TOK_KW_SUBSYS   CMD11b     consume     CMD11a
CMD11a      TOK_RP          DONE       consume     _
CMD11b      TOK_LP          CMD11c     consume     _
CMD11c      TOK_SYMBOL      CMD11d     consume     _
CMD11d      TOK_LP          CMD11e     consume     _
CMD11e      TOK_SYMBOL      CMD11e     consume     _
CMD11e      TOK_RP          R0         consume     _

//    <check-sys-attr> ::=
//              :input  <sorted-var-list> <check-sys-attr>
//            | :output <sorted-var-list> <check-sys-attr>
//            | :local  <sorted-var-list> <check-sys-attr>
//            | :assume ( <symbol> <term> ) <check-sys-attr>
//            | :current ( <symbol> <term> ) <check-sys-attr>
//            | :reach ( <symbol> <term> ) <check-sys-attr>
//            | :fair ( <symbol> <term> ) <check-sys-attr>
//            | :query ( <symbol> ( <symbol>+ ) ) <check-sys-attr>
//            | :queries ( ( <symbol> ( <symbol>+ ) )+ ) <check-sys-attr>
//            | )
//
CMD12       TOK_SYMBOL          CMD12a      consume     _
CMD12a      TOK_KW_INPUT        SVL0        consume     CMD12a
CMD12a      TOK_KW_OUTPUT       SVL0        consume     CMD12a
CMD12a      TOK_KW_LOCAL        SVL0        consume     CMD12a
CMD12a      TOK_KW_ASSUME       CMD12b      consume     CMD12a
CMD12a      TOK_KW_CURRENT      CMD12b      consume     CMD12a
CMD12a      TOK_KW_REACH        CMD12b      consume     CMD12a
CMD12a      TOK_KW_FAIR         CMD12b      consume     CMD12a
CMD12a      TOK_KW_QUERY        CMD12c      consume     CMD12a
CMD12a      TOK_KW_QUERIES      CMD12d      consume     CMD12a
CMD12a      TOK_RP              DONE        consume     _

// After ':assumption', ':current', ':reachable', or ':fairness'
CMD12b      TOK_LP              CMD12b0     consume     _
CMD12b0     TOK_SYMBOL          TRM0        consume     R0

// After ':query'
CMD12c      TOK_LP              CMD12c0     consume     _
CMD12c0     TOK_SYMBOL          CMD12c1     consume     _
CMD12c1     TOK_LP              CMD12c2     consume     _
CMD12c2     TOK_SYMBOL          CMD12c3     consume     _
CMD12c3     TOK_SYMBOL          CMD12c3     consume     _
CMD12c3     TOK_RP              R0          consume     _

// After ':queries'
CMD12d      TOK_LP      CMD12c     consume      CMD12d0
CMD12d0     TOK_LP      CMD12c     pass         CMD12d0
CMD12d0     TOK_RP      DONE       consume      _


// Terms
//
//   <terms> ::=
//              <numeral>
//            | <decimal>
//            | <hexadecimal>
//            | <binary>
//            | <string>
//            | <symbol>
//            | ( <symbol> <term>+ )
//            | (_ <symbol> <numeral>+ )
//            | ( as <symbol> <sort> )
//            | ( as (_ <symbol> <numeral>+ ) <sort> )
//            | ( ( _ <symbol> <numeral>+ ) <term>+ )
//            | ( ( as <symbol> <sort> ) <term>+ )
//            | ( ( as (_ <symbol> <numeral>+ ) <sort> ) <term>+ )
//            | ( let ( <var-binding>+ ) <term> )
//            | ( forall ( <sorted-var>+ ) <term> )
//            | ( exists ( <sorted-var>+ ) <term> )
// [NOT IMPL] | ( ! <term> <attribute>+ ) 

// Start
TRM0       TOK_NUMERAL     DONE        consume     _
TRM0       TOK_DECIMAL     DONE        consume     _
TRM0       TOK_HEX         DONE        consume     _
TRM0       TOK_BINARY      DONE        consume     _
TRM0       TOK_STRING      DONE        consume     _
TRM0       TOK_SYMBOL      DONE        consume     _
TRM0       TOK_LP          TRM1        consume     _

// After '('
TRM1       TOK_SYMBOL           TRM0       consume     TRM2
TRM1       TOK_RW_UNDERSCORE    TRM3       consume     _
TRM1       TOK_RW_AS            TRM4       consume     _
TRM1       TOK_RW_LET           TRM5       consume     _
TRM1       TOK_RW_FORALL        TRM6       consume     _
TRM1       TOK_RW_EXISTS        TRM6       consume     _
TRM1       TOK_LP               TRM7       consume     _

// Term arguments   
TRM2       TOK_RP          DONE        consume     _
TRM2       *               TRM0        pass        TRM2

// After '(_'
TRM3        TOK_SYMBOL      TRM3a       consume     _
TRM3a       TOK_NUMERAL     TRM3b       consume     _
TRM3b       TOK_NUMERAL     TRM3b       consume     _
TRM3b       TOK_RP          DONE        consume     _

// After '( as'
TRM4        TOK_SYMBOL          SRT0        consume     R0
TRM4        TOK_LP              TRM4a       consume     _
TRM4a       TOK_RW_UNDERSCORE   TRM4b       consume     _
TRM4b       TOK_SYMBOL          TRM4c       consume     _
TRM4c       TOK_NUMERAL         TRM4d       consume     _
TRM4d       TOK_NUMERAL         TRM4d       consume     _
TRM4d       TOK_RP              SRT0        consume     R0

// After '( let'
// Example: '(let ((t1 <term>) (<t2 term>)) <term>)'
TRM5        TOK_LP          TRM5a       consume     _
TRM5a       TOK_LP          TRM5b       consume     _
TRM5b       TOK_SYMBOL      TRM0        consume     TRM5c
TRM5c       TOK_RP          TRM5d       consume     _
TRM5d       TOK_LP          TRM5b       consume     _
TRM5d       TOK_RP          TRM0        consume     R0

// After '( forall' or '( exists'
// Example: '(exists ((x Int) (y Int)) (> x y))'
TRM6        TOK_LP      SVL0a       pass        R0,TRM0

// After '(('   
TRM7        TOK_RW_UNDERSCORE   TRM3       consume     TRM7a,TRM0
TRM7        TOK_RW_AS           TRM4       consume     TRM7a,TRM0
TRM7a       TOK_RP              DONE       consume     _
TRM7a       *                   TRM0       pass        _


// Sorted variable lists (SVL)
// Example: '((var1 sort2) (var2 sort2))'
// SVL0 accepts empty list, SVL0a requires at least one element
SVL0        TOK_LP          SVL1        consume     _
SVL0a       TOK_LP          SVL0b       consume     _
SVL0b       TOK_LP          SVL2        consume     _
SVL1        TOK_LP          SVL2        consume     _
SVL1        TOK_RP          DONE        consume     _
SVL2        TOK_SYMBOL      SRT0        consume     SVL3
SVL3        TOK_RP          SVL1        consume     _


// Sorts
//
//   <sort> ::=
//             <symbol>
//           | ( _ <symbol> <numeral>+ )
//           | ( <symbol> <sort>+ )
//           | ( (_ <symbol> <numeral>+ ) <sort>+ )

// Start
SRT0        TOK_SYMBOL          DONE        consume     _
SRT0        TOK_LP              SRT1        consume     _

// After '('
SRT1        TOK_SYMBOL          SRT0        consume     SRT2
SRT1        TOK_RW_UNDERSCORE   SRT3        consume     _
SRT1        TOK_LP              SRT4        consume     _

// After '( <symbol> <sort>'
SRT2        TOK_RP              DONE        consume     _
SRT2        *                   SRT0        pass        SRT2

// After '(_'
SRT3        TOK_SYMBOL          SRT3a        consume     _
SRT3a       TOK_NUMERAL         SRT3b        consume     _
SRT3b       TOK_NUMERAL         SRT3b        consume     _
SRT3b       TOK_RP              DONE         consume     _

// After '((_'
SRT4        TOK_SYMBOL          SRT4a        consume     _
SRT4a       TOK_NUMERAL         SRT4b        consume     _
SRT4b       TOK_NUMERAL         SRT4b        consume     _
SRT4b       TOK_RP              SRT0         consume     SRT2



// THINGS FOR ANNOTATED TERMS

//   <attribute-value> ::=
//              <numeral>
//            | <decimal>
//            | <hexadecimal>
//            | <binary>
//            | <string>
//            | <symbol>
//            | ( <s-expr>+ )
//ATV0        TOK_NUMERAL     DONE        consume     _
//ATV0        TOK_DECIMAL     DONE        consume     _
//ATV0        TOK_HEX         DONE        consume     _
//ATV0        TOK_BINARY      DONE        consume     _
//ATV0        TOK_STRING      DONE        consume     _
//ATV0        TOK_SYMBOL      DONE        consume     _
//ATV0        TOK_KEYWORD     DONE        consume     _
//ATV0        TOK_LP          SXP0        consume     ATV1
//ATV1        TOK_RP          DONE        consume     _
//ATV1        *               SXP0        pass        ATV1


//   <s-expr> ::=
//              <numeral>
//            | <decimal>
//            | <hexadecimal>
//            | <binary>
//            | <string>
//            | <symbol>
//            | <keyword>
//            | ( <s-expr>+ )
//SXP0        TOK_NUMERAL     DONE        consume     _
//SXP0        TOK_DECIMAL     DONE        consume     _
//SXP0        TOK_HEX         DONE        consume     _
//SXP0        TOK_BINARY      DONE        consume     _
//SXP0        TOK_STRING      DONE        consume     _
//SXP0        TOK_SYMBOL      DONE        consume     _
//SXP0        TOK_KEYWORD     DONE        consume     _
//SXP0        TOK_LP          SXP0        consume     SXP1
//SXP1        TOK_RP          DONE        consume     _
//SXP1        *               SXP0        pass        SXP1