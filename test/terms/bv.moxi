(set-logic QF_BV)
(define-fun f0 () (_ BitVec 1) #b1)
(define-fun f1 () (_ BitVec 8) #b11111111)
(define-fun f2 ((x (_ BitVec 8))) (_ BitVec 8) x)
(define-fun f3 ((x (_ BitVec 8))) (_ BitVec 8) (bvnot x)) 
(define-fun f4 ((x (_ BitVec 8))) (_ BitVec 1) (bvredand x)) 
(define-fun f5 ((x (_ BitVec 8))) (_ BitVec 1) (bvredor x)) 
(define-fun f6 ((x (_ BitVec 8))) (_ BitVec 8) (bvneg x)) 
(define-fun f7 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvand x y))
(define-fun f8 ((x (_ BitVec 8)) (y (_ BitVec 8)) (z (_ BitVec 8))) (_ BitVec 8) (bvand x y z))
(define-fun f9 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvnand x y))
(define-fun f10 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvor x y))
(define-fun f11 ((x (_ BitVec 8)) (y (_ BitVec 8)) (z (_ BitVec 8))) (_ BitVec 8) (bvor x y z))
(define-fun f12 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvnor x y))
(define-fun f13 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvxor x y))
(define-fun f14 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvxnor x y))
(define-fun f15 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvadd x y))
(define-fun f16 ((x (_ BitVec 8)) (y (_ BitVec 8)) (z (_ BitVec 8))) (_ BitVec 8) (bvadd x y z))
(define-fun f17 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvsub x y))
(define-fun f18 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvmul x y))
(define-fun f19 ((x (_ BitVec 8)) (y (_ BitVec 8)) (z (_ BitVec 8))) (_ BitVec 8) (bvmul x y z))
(define-fun f20 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvudiv x y))
(define-fun f21 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvsdiv x y))
(define-fun f22 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvsrem x y))
(define-fun f23 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvsdiv x y))
(define-fun f24 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvsrem x y))
(define-fun f25 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvsmod x y))
(define-fun f26 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvshl x y))
(define-fun f27 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvlshr x y))
(define-fun f28 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (bvashr x y))
(define-fun f29 ((x (_ BitVec 8)) (y (_ BitVec 8))) Bool (= x y))
(define-fun f30 ((x (_ BitVec 8)) (y (_ BitVec 8))) Bool (bvcomp x y))
(define-fun f31 ((x (_ BitVec 8)) (y (_ BitVec 8))) Bool (bvult x y))
(define-fun f32 ((x (_ BitVec 8)) (y (_ BitVec 8))) Bool (bvule x y))
(define-fun f33 ((x (_ BitVec 8)) (y (_ BitVec 8))) Bool (bvugt x y))
(define-fun f34 ((x (_ BitVec 8)) (y (_ BitVec 8))) Bool (bvuge x y))
(define-fun f35 ((x (_ BitVec 8)) (y (_ BitVec 8))) Bool (bvslt x y))
(define-fun f36 ((x (_ BitVec 8)) (y (_ BitVec 8))) Bool (bvsle x y))
(define-fun f37 ((x (_ BitVec 8)) (y (_ BitVec 8))) Bool (bvsgt x y))
(define-fun f38 ((x (_ BitVec 8)) (y (_ BitVec 8))) Bool (bvsge x y))
(define-fun f39 ((x (_ BitVec 8))) (_ BitVec 13) ((_ zero_extend 5) x)) 
(define-fun f40 ((x (_ BitVec 8))) (_ BitVec 13) ((_ sign_extend 5) x)) 
(define-fun f41 ((x (_ BitVec 8))) (_ BitVec 8) ((_ rotate_left 5) x)) 
(define-fun f42 ((x (_ BitVec 8))) (_ BitVec 8) ((_ rotate_right 5) x)) 
(define-fun f43 ((x (_ BitVec 8))) (_ BitVec 24) ((_ repeat 3) x)) 
(define-fun f44 ((x (_ BitVec 8))) (_ BitVec 4) ((_ extract 3 0) x)) 
(define-fun f45 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 16) (concat x y))
