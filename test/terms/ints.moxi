(set-logic QF_LIA)
(define-fun f0 () Int 0)
(define-fun f1 () Int 100)
(define-fun f2 ((x Int)) Int x)
(define-fun f3 ((x Int)) Int (- x))
(define-fun f4 () Int (- 5))
(define-fun f5 ((x Int) (y Int)) Int (- x y))
(define-fun f6 ((x Int) (y Int)) Int (+ x y))
(define-fun f7 ((x Int) (y Int) (z Int) (a Int)) Int (+ x y z a))
(define-fun f8 ((x Int) (y Int)) Int (* x y))
(define-fun f9 ((x Int) (y Int) (z Int)) Int (- x y z))
(define-fun f10 ((x Int) (y Int) (z Int)) Int (+ x y z))
(define-fun f11 ((x Int) (y Int) (z Int)) Int (* x y z))
(define-fun f12 ((x Int) (y Int)) Int (div x y))
(define-fun f13 ((x Int) (y Int) (z Int)) Int (div x y z))
(define-fun f14 ((x Int) (y Int)) Int (mod x y))
(define-fun f15 ((x Int)) Int (abs x))
(define-fun f16 ((x Int) (y Int)) Bool (> x y))
(define-fun f17 ((x Int) (y Int)) Bool (>= x y))
(define-fun f18 ((x Int) (y Int)) Bool (< x y))
(define-fun f19 ((x Int) (y Int)) Bool (<= x y))
(define-fun f20 ((x Int) (y Int) (z Int)) Bool (> x y z))
(define-fun f21 ((x Int) (y Int) (z Int)) Bool (>= x y z))
(define-fun f22 ((x Int) (y Int) (z Int)) Bool (< x y z))
(define-fun f23 ((x Int) (y Int) (z Int)) Bool (<= x y z))
(define-fun f24 ((x Int)) Bool ((_ divisible 5) x))
